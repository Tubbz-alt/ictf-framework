---
- name: install requirements
  package: name={{ item }} state=latest update_cache=yes
  become: true
  with_items:
    - nginx
    - uwsgi
    - uwsgi-plugin-python
    - mysql-server
    - python-pip
    - python-virtualenv
    - python-mysqldb
    - python-dev
    - awscli
  tags: [skip_ansible_lint]

- include_role:
    name: common
  vars:
    swapfile_size: "2G"

- name: Upgrade pip and setuptools and related modules for cryptography fixes
  pip:
    name:
      - pip
      - setuptools==44.0.0
      - pyOpenSSL
      - ndg-httpsclient
      - pyasn1
    state: latest
    extra_args: --upgrade
  become: true
    
- name: secrets directory permissions
  file:
    path=/opt/ictf/secrets/database-api
    state=directory
    owner=root group=root mode="u=rwx,g=rx,o=rx"

# sysctl
- name: sysctl - performance tuning
  copy:
    src=sysctl.conf
    dest=/etc/sysctl.d/99-ictf-database.conf
    owner=root group=root mode="u=rw,g=r,o=r"

- name: sysctl - reload
  command: sysctl -p /etc/sysctl.d/99-ictf-database.conf
  tags: [skip_ansible_lint]

# mysql
- name: mysql - performance tuning
  copy:
    src=mysql.conf
    dest=/etc/mysql/conf.d/ictf-database.cnf
    owner=root group=root mode="u=rw,g=r,o=r"

- name: mysql - restart MySQL service to apply new configurations
  service:
      name=mysql
      state=restarted

- name: mysql - create ictf user
  mysql_user:
    name=ictf
    host=localhost
    password=hacker
    priv=ictf.*:ALL

- name: mysql - create ictf database
  mysql_db:
    db=ictf

- name: mysql - import ictf tables
  mysql_db:
    db=ictf
    state=import
    target=/opt/ictf/database/support/schema.sql

- name: mysql - configure DB dump area
  file:
    path=/media/backups/ictf
    state=directory

- name: mysql - configure DB dump crontab
  cron:
    name="dump ictf database"
    minute="*/20"
    hour="*"
    user=root
    job="mysqldump ictf | gzip > /media/backups/ictf/$(date '+\%Y\%m\%d-\%H\%M.\%S').sql.gz"
#        job="mysqldump ictf > /media/backups/ictf/$(date '+\%Y\%m\%d-\%H\%M\%S').dump

# ictf-database-api configuration
- name: virtualenv - install requirements
  pip:
    requirements: /opt/ictf/database/requirements.txt
    virtualenv: /opt/ictf/venv/database


- name: virtualenv - install mysql-connector
  # We have to install mysql-connector manually because the current
  # version cannot be installed with pip without a patch:
  # - https://bugs.mysql.com/bug.php?id=79766
  # - https://github.com/mysql/mysql-connector-python/pull/9
  pip:
    name=/opt/ictf/database/support/mysql-connector-python-2.1.3/
    virtualenv=/opt/ictf/venv/database

- name: ensure /opt/ictf/settings/ exists
  file:
    path=/opt/ictf/settings/
    state=directory

- name: ictf-database-api configuration - copy defaults
  copy:
    src=/opt/ictf/database/settings.py
    dest=/opt/ictf/settings/database-api.py

- name: ensure log file exists with rw for nobody
  copy:
    content: ""
    dest: /var/log/ictf-database-api.log
    mode: 0666

# TODO: we should be using proper templates here instead or load it or
#       set environment variables at best
- name: ictf-database-api configuration - disable DEBUG
  replace:
    name=/opt/ictf/settings/database-api.py
    regexp="^(DEBUG).*$"
    replace="\1 = False"

- include_role:
    name: register_service_daemon
  vars:
    service_name: ictf-database-api
    description: "Web-API for the iCTF database"
    command: "/usr/bin/uwsgi -c uwsgi.ini"
    myenvironment: "ICTF_DATABASE_SETTINGS=/opt/ictf/settings/database-api.py"
    working_directory: "/opt/ictf/database"
    dependencies:
      - "nginx.service"
      - "mysql.service"

#- name: ictf-database-api - setup service daemon
#  template:
#    src=ictf-database-api.service.j2
#    dest=/etc/systemd/system/ictf-database-api.service
#    owner=root group=root mode="u=rw,g=r,o=r"
#
#- name: ictf-database-api - enable service
#  service:
#    name: ictf-database-api
#    enabled: yes
#
#  notify:
#    - restart ictf-database-api

# setup nginx
- name: nginx - allow worker processes, 4 per core
  lineinfile:
    dest=/etc/nginx/nginx.conf
    regexp="(worker_processes).*$"
    line="worker_processes {{ 4 * ansible_processor_cores }};"

- name: nginx - allow more open files
  lineinfile:
    dest=/etc/nginx/nginx.conf
    regexp="^worker_rlimit_nofile"
    line="worker_rlimit_nofile 512000;"
    insertafter="(worker_processes).*"

- name: nginx - set worker connections to 4096
  lineinfile:
    dest=/etc/nginx/nginx.conf
    regexp="(worker_connections).*$"
    line="\tworker_connections 4096;"

- name: nginx - disable default configuration
  file:
    path=/etc/nginx/sites-enabled/default
    state=absent recurse=no

- name: nginx - add ictf-database-api
  copy:
    src=nginx.conf
    dest=/etc/nginx/sites-available/ictf-database-api.conf
    owner=root group=root mode="u=rw,g=r,o=r"

- name: nginx - enable ictf-database-api
  file:
    src=/etc/nginx/sites-available/ictf-database-api.conf
    dest=/etc/nginx/sites-enabled/ictf-database-api.conf
    owner=root group=root
    state=link
  notify:
    - restart nginx

- include_role:
    name: register_service_daemon
  vars:
    service_name: ictf-db-export-s3
    description: "Daemon periodically exporting database dumps to S3"
    command: "/opt/ictf/venv/database/bin/python ictf-db-export-s3.py"
    working_directory: "/opt/ictf/database"
    dependencies:
      - "nginx.service"
      - "mysql.service"

# print API secret key
# - name: ictf-database-api secret key
#   debug: msg="The iCTF API secret is '{{ ICTF_API_SECRET }}'"

- include_role:
    name: common_server
  vars:
    server_hostname: Database
